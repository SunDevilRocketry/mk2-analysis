classdef Logs
    properties
        time
        chamber_pressure_psia
        chamber_temperature_C
        fuel_pressure_psia
        oxid_pressure_psia
        fuel_line_drop_psia
        fuel_bv_drop_psia
        fuel_injector_drop_psia
        oxid_line_drop_psia
        oxid_bv_drop_psia
        oxid_injector_drop_psia
        fuel_volumetric_gpm
        oxid_volumetric_gpm
        fuel_line_velocity_mps
        oxid_line_velocity_mps
        fuel_injector_velocity_mps
        oxid_injector_velocity_mps
        fuel_line_reynolds_Re
        oxid_line_reynolds_Re
        fuel_volume_gal
        oxid_volume_gal
        throat_diameter_inches
        thrust_lbf
        exit_velocity_m_s
        exit_pressure_psia
        o_f_ratio
    end

    methods
        function obj = Logs()
            obj.time = [];
            obj.chamber_pressure_psia = [];
            obj.chamber_temperature_C = [];
            obj.fuel_pressure_psia = [];
            obj.oxid_pressure_psia = [];
            obj.fuel_line_drop_psia = [];
            obj.fuel_bv_drop_psia = [];
            obj.fuel_injector_drop_psia = [];
            obj.oxid_line_drop_psia = [];
            obj.oxid_bv_drop_psia = [];
            obj.oxid_injector_drop_psia = [];
            obj.fuel_volumetric_gpm = [];
            obj.oxid_volumetric_gpm = [];
            obj.fuel_line_velocity_mps = [];
            obj.oxid_line_velocity_mps = [];
            obj.fuel_injector_velocity_mps = [];
            obj.oxid_injector_velocity_mps = [];
            obj.fuel_line_reynolds_Re = [];
            obj.oxid_line_reynolds_Re = [];
            obj.fuel_volume_gal = [];
            obj.oxid_volume_gal = [];
            obj.throat_diameter_inches = [];
            obj.thrust_lbf = [];
            obj.exit_velocity_m_s = [];
            obj.exit_pressure_psia = [];
            obj.o_f_ratio = [];
        end
        function self = log_from_state(self, dt, state)
            if isempty(self.time)
                self.time = dt;
            else
                self.time = [self.time self.time(end)+dt];
            end
            self.chamber_pressure_psia = [...
                self.chamber_pressure_psia...
                Convert.bar_to_psia(state.chamber_pressure)...
            ];
            self.chamber_temperature_C = [...
                self.chamber_temperature_C...
                Convert.K_to_C(state.get_chamber_temperature())...
            ];
            self.fuel_pressure_psia = [...
                self.fuel_pressure_psia...
                Convert.bar_to_psia(state.get_fuel_pressure())...
            ];
            self.oxid_pressure_psia = [...
                self.oxid_pressure_psia...
                Convert.bar_to_psia(state.get_oxid_pressure())...
            ];
            self.fuel_line_drop_psia = [...
                self.fuel_line_drop_psia...
                Convert.bar_to_psia(state.get_fuel_line_drop()) ...
            ];
            self.fuel_bv_drop_psia = [...
                self.fuel_bv_drop_psia...
                Convert.bar_to_psia(state.get_fuel_bv_drop()) ...
            ];
            self.fuel_injector_drop_psia = [...
                self.fuel_injector_drop_psia...
                Convert.bar_to_psia(state.get_fuel_injector_drop()) ...
            ];
            self.oxid_line_drop_psia = [...
                self.oxid_line_drop_psia...
                Convert.bar_to_psia(state.get_oxid_line_drop()) ...
            ];
            self.oxid_bv_drop_psia = [...
                self.oxid_bv_drop_psia...
                Convert.bar_to_psia(state.get_oxid_bv_drop()) ...
            ];
            self.oxid_injector_drop_psia = [...
                self.oxid_injector_drop_psia...
                Convert.bar_to_psia(state.get_oxid_injector_drop()) ...
            ];
            self.fuel_volumetric_gpm = [...
                self.fuel_volumetric_gpm...
                60*Convert.m3_to_gal(-state.get_instanteous_change_in_fuel_volume())...
            ];
            self.oxid_volumetric_gpm = [...
                self.oxid_volumetric_gpm...
                60*Convert.m3_to_gal(-state.get_instanteous_change_in_oxid_volume())...
            ];
            self.fuel_line_velocity_mps = [...
                self.fuel_line_velocity_mps...
                state.get_fuel_line_velocity()...
            ];
            self.oxid_line_velocity_mps = [...
                self.oxid_line_velocity_mps...
                state.get_oxid_line_velocity()...
            ];
            self.fuel_injector_velocity_mps = [...
                self.fuel_injector_velocity_mps...
                state.get_fuel_injector_velocity()...
            ];
            self.oxid_injector_velocity_mps = [...
                self.oxid_injector_velocity_mps...
                state.get_oxid_injector_velocity()...
            ];
            self.fuel_line_reynolds_Re = [...
                self.fuel_line_reynolds_Re...
                state.get_fuel_line_reynolds()...
            ];
            self.oxid_line_reynolds_Re = [...
                self.oxid_line_reynolds_Re...
                state.get_oxid_line_reynolds()...
            ];
            self.fuel_volume_gal = [...
                self.fuel_volume_gal...
                Convert.m3_to_gal(state.fuel_volume)...
            ];
            self.oxid_volume_gal = [...
                self.oxid_volume_gal...
                Convert.m3_to_gal(state.oxid_volume)...
            ];
            self.throat_diameter_inches = [...
                self.throat_diameter_inches...
                Convert.m2_to_in_diameter(state.eroded_thoat_area)...
            ];
            self.thrust_lbf = [...
                self.thrust_lbf...
                Convert.N_to_lbf(state.get_thrust())...
            ];
            self.exit_velocity_m_s = [...
                self.exit_velocity_m_s...
                state.get_exit_velocity()...
            ];
            self.exit_pressure_psia = [...
                self.exit_pressure_psia...
                Convert.bar_to_psia(state.get_exit_pressure())...
            ];
            self.o_f_ratio = [...
                self.o_f_ratio...
                state.get_o_f_ratio()...
            ];
        end
        function self = load_from_file(self, filename)
            % Load results from file
            results = readtable(filename);
            % Extract variables from loaded results
            self.time = results.t_time_s;
            self.chamber_pressure_psia = results.chamber_pressure_psia;
            self.chamber_temperature_C = results.chamber_temperature_C;
            self.fuel_pressure_psia = results.fuel_pressure_psia;
            self.oxid_pressure_psia = results.oxid_pressure_psia;
            self.fuel_line_drop_psia = results.fuel_line_drop_psia;
            self.fuel_bv_drop_psia = results.fuel_bv_drop_psia;
            self.fuel_injector_drop_psia = results.fuel_injector_drop_psia;
            self.oxid_line_drop_psia = results.oxid_line_drop_psia;
            self.oxid_bv_drop_psia = results.oxid_bv_drop_psia;
            self.oxid_injector_drop_psia = results.oxid_injector_drop_psia;
            self.fuel_volumetric_gpm = results.fuel_volumetric_gpm;
            self.oxid_volumetric_gpm = results.oxid_volumetric_gpm;
            self.fuel_volume_gal = results.fuel_volume_gal;
            self.oxid_volume_gal = results.oxid_volume_gal;
            self.fuel_line_velocity_mps = results.fuel_line_velocity_mps;
            self.oxid_line_velocity_mps = results.oxid_line_velocity_mps;
            self.fuel_injector_velocity_mps = results.fuel_injector_velocity_mps;
            self.oxid_injector_velocity_mps = results.oxid_injector_velocity_mps;
            self.fuel_line_reynolds_Re = results.fuel_line_reynolds_Re;
            self.oxid_line_reynolds_Re = results.oxid_line_reynolds_Re;
            self.throat_diameter_inches = results.throat_diameter_inches;
            self.thrust_lbf = results.thrust_lbf;
            self.exit_velocity_m_s = results.exit_velocity_m_s;
            self.exit_pressure_psia = results.exit_pressure_psia;
            self.o_f_ratio = results.o_f_ratio;
        end
    end
end